ALTER TABLESPACE SYSTEM
ADD DATAFILE 'HOLI.dbt' SIZE 200M;

CREATE TABLE TEST_CASE(
	col_pk INTEGER NOT NULL,
	col_il INTEGER NOT NULL,
	col_dl DATE NOT NULL,
	col_c1 VARCHAR2(100) NOT NULL,
	col_i2 INTEGER NOT NULL,
	col_d2 DATE NOT NULL,
	col_c2 VARCHAR2(100) NOT NULL
)

CREATE OR REPLACE FUNCTION REPEAT (c CHAR, n INTEGER) RETURN VARCHAR
IS
s VARCHAR2(100) := '';
BEGIN
	FOR i in 1 .. n LOOP
		s := s || c;
	END LOOP;
	RETURN (s);
END;

DECLARE
row_count INTEGER := 1000000;
BEGIN
	FOR i IN 1 .. row_count  LOOP
		INSERT INTO TEST_CASE
		VALUES(i, mod(i,100), SYSDATE-mod(i,100),
		REPEAT(substr('ABCDEFGHIJ', mod(i,10), 1), 10),
		mod(i,100), SYSDATE-mod(i, 100),
		REPEAT(substr('ABCDEFGHIJ', mod(i,10), 1), 10)
		);

	IF(mod(i,100) = 0) THEN
		COMMIT;
	END IF;
	END LOOP;
END;

--EXPLAIN PLAN
--EXPLAIN PLAN COMMAND 
--THE DATA IS STORED ON PLAN TABLE
--SELECT * FROM PLAN_TABLE

--THIS STATEMENT WORKS THIS WAY, IT CREATES A EXPLANATION PLAN AND WE SHOULD CALL IT 'bad1' NAME 
EXPLAIN PLAN SET STATEMENT_ID = 'bad1' FOR
SELECT * FROM TEST_CASE WHERE col_d2 = (SELECT MIN(col_d2)
FROM TEST_CASE WHERE col_pk <= 1000 OR col_pk > 990000)

-- THIS IS THE WAY TO EXECUTE THE EXPLAIN PLAN
SELECT * FROM TABLE
(DBMS_XPLAN.DISPLAY('PLAN_TABLE', 'bad1', 'TYPICAL'));

-- WE MODIFY THE TABLE, BECAUSE WE NEED THAT THE COST OF THE QUERY TO BE DOWN 
ALTER TABLE TEST_CASE
ADD CONSTRAINT TEST_CASE_PK PRIMARY KEY (col_pk);

CREATE INDEX col_d2 ON TEST_CASE (col_d2);

SELECT * FROM TEST_CASE
WHERE col_d2 = (SELECT MIN(col_d2)
		FROM TEST_CASE WHERE col_pk NOT BETWEEN 1001 AND 990000)
